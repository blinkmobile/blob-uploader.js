/*
* blob-uploader.js: v0.0.1 | https://github.com/blinkmobile/blob-uploader.js#readme
* (c) 2017 BlinkMobile | Released under the MIT license
*/

var blobUploader=function(r){function e(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return r[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}var t={};return e.m=r,e.c=t,e.d=function(r,t,o){e.o(r,t)||Object.defineProperty(r,t,{configurable:!1,enumerable:!0,get:o})},e.n=function(r){var t=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(t,"a",t),t},e.o=function(r,e){return Object.prototype.hasOwnProperty.call(r,e)},e.p="",e(e.s=0)}([function(r,e,t){var o,n,i;!function(t,u){n=[r],o=u,void 0!==(i="function"==typeof o?o.apply(e,n):o)&&(r.exports=i)}(0,function(r){"use strict";function e(r){if(!r)throw new TypeError("blobUploader expects a api URL during instantiation");t.set(this,{uri:r})}var t=new WeakMap;e.prototype.uploadBlob=function(r){var e=this;if(!r)return Promise.reject(new Error("blob argument not provided"));var o=t.get(this);if(!o||!o.hasOwnProperty("uri"))return Promise.reject(new Error("blobUploader uri not configured"));var n=new Request(o.uri+"v1/signedURL/",{method:"POST",mode:"cors"});return fetch(n).then(function(r){return r.ok?r.json():Promise.reject(new Error(r.status+" "+r.statusText))}).then(function(t){return e._uploadToS3(r,t.putUrl),t.id}).catch(function(r){return Promise.reject(new Error("Error calling blob api service: "+r))})},e.prototype._uploadToS3=function(r,e){var t=new Request(e,{method:"PUT",mode:"cors",body:r,headers:new Headers({"Content-Type":" "})});return fetch(t).then(function(r){if(!r.ok)return Promise.reject(Error(r.status+" "+r.statusText))}).catch(function(r){return Promise.reject(new Error("Error uploading to S3: "+r))})},e.prototype.retrieveBlobUrl=function(r){if(!r)return Promise.reject(new Error("uuid argument not provided"));if(!t||!t.get(this))return Promise.reject(new Error("blobUploader uri not configured"));var e=t.get(this);if(!e||!e.hasOwnProperty("uri"))return Promise.reject(new Error("blobUploader uri not configured"));var o=new Request(e.uri+"v1/signedURL/"+r,{method:"PUT",mode:"cors"});return fetch(o).then(function(r){return r.ok?r.json():Promise.reject(new Error(r.status+" "+r.statusText))}).then(function(r){return r.getUrl}).catch(function(r){return Promise.reject(new Error("Error retrieving blob url: "+r))})},e.prototype.managedUpload=function(r){if(!r)return Promise.reject(new Error("blob argument not provided"));var e=t.get(this);if(!e||!e.hasOwnProperty("uri"))return Promise.reject(new Error("blobUploader uri not configured"));var o=new Request(e.uri+"v1/temporaryCredentials",{method:"GET",mode:"cors"});return fetch(o).then(function(r){return r.ok?r.json():Promise.reject(new Error(r.status+" "+r.statusText))}).then(function(r){return r.id}).catch(function(r){return Promise.reject(new Error("Error calling blob api service: "+r))})},r.exports=e})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJibS1ibG9iLXVwbG9hZGVyLm1pbi5qcyIsInNvdXJjZVJvb3QiOiIifQ==